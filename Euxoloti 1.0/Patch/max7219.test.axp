<patch-1.0>
   <obj type="gpio/spi/config" sha="62af644b09e7f654b36d66533da8ea5971ddb351" uuid="d3e75d8a02e2ccabbbc2af3bc2fcdb8ea65a6133" name="config_1" x="112" y="0">
      <params/>
      <attribs>
         <combo attributeName="clock_polarity" selection="CPOL=0"/>
         <combo attributeName="clock_phase" selection="CPHA=0"/>
         <combo attributeName="baudrate" selection="FPCLK/64"/>
         <combo attributeName="format" selection="MSB first"/>
      </attribs>
   </obj>
   <obj type="script/script2" sha="362a4413ceaefbe716480bf8f9c62eb3587fe6c0" uuid="d39e743cf47c9221f4e99c133430148cf74c68c5" name="script2_1" x="112" y="112">
      <params/>
      <attribs>
         <text attributeName="script">
            <sText><![CDATA[#define A 0
#define B 1
#define C 2
#define D 3
#define E 4
#define F 5
#define G 6
#define H 7
#define I 8
#define J 9
#define K 10
#define L 11
#define M 12
#define N	13
#define O	14
#define P	15
#define Q	16
#define R	17
#define S
#define T
#define U
#define V
#define W
#define X
#define Y
#define Z


uint8_t *txbuf;
uint8_t *rxbuf;

uint8_t lA[6] = { 4, 0B01111110, 0B00010001, 0B00010001, 0B01111110, 0B00000000 }; // A
uint8_t lB[6] = { 4, 0B01111111, 0B01001001, 0B01001001, 0B00110110, 0B00000000 }; // B
uint8_t lC[6] = { 4, 0B00111110, 0B01000001, 0B01000001, 0B00100010, 0B00000000 }; // C
uint8_t lD[6] = { 4, 0B01111111, 0B01000001, 0B01000001, 0B00111110, 0B00000000 }; // D
uint8_t lE[6] = { 4, 0B01111111, 0B01001001, 0B01001001, 0B01000001, 0B00000000 }; // E
uint8_t lF[6] = { 4, 0B01111111, 0B00001001, 0B00001001, 0B00000001, 0B00000000 }; // F
uint8_t lG[6] = { 4, 0B00111110, 0B01000001, 0B01001001, 0B01111010, 0B00000000 }; // G
uint8_t lH[6] = { 4, 0B01111111, 0B00001000, 0B00001000, 0B01111111, 0B00000000 }; // H
uint8_t lI[6] = { 3, 0B01000001, 0B01111111, 0B01000001, 0B00000000, 0B00000000 }; // I
uint8_t lJ[6] = { 4, 0B00110000, 0B01000000, 0B01000001, 0B00111111, 0B00000000 }; // J
uint8_t lK[6] = { 4, 0B01111111, 0B00001000, 0B00010100, 0B01100011, 0B00000000 }; // K
uint8_t lL[6] = { 4, 0B01111111, 0B01000000, 0B01000000, 0B01000000, 0B00000000 }; // L
uint8_t lM[6] = { 5, 0B01111111, 0B00000010, 0B00001100, 0B00000010, 0B01111111 }; // M
uint8_t lN[6] = { 5, 0B01111111, 0B00000100, 0B00001000, 0B00010000, 0B01111111 }; // N
uint8_t lO[6] = { 4, 0B00111110, 0B01000001, 0B01000001, 0B00111110, 0B00000000 }; // O
uint8_t lP[6] = { 4, 0B01111111, 0B00001001, 0B00001001, 0B00000110, 0B00000000 }; // P
uint8_t lQ[6] = { 4, 0B00111110, 0B01000001, 0B01000001, 0B10111110, 0B00000000 }; // Q
uint8_t lR[6] = { 4, 0B01111111, 0B00001001, 0B00001001, 0B01110110, 0B00000000 }; // R
uint8_t lS[6] = { 4, 0B01000110, 0B01001001, 0B01001001, 0B00110010, 0B00000000 }; // S
uint8_t lT[6] = { 5, 0B00000001, 0B00000001, 0B01111111, 0B00000001, 0B00000001 }; // T
uint8_t lU[6] = { 4, 0B00111111, 0B01000000, 0B01000000, 0B00111111, 0B00000000 }; // U
uint8_t lV[6] = { 5, 0B00001111, 0B00110000, 0B01000000, 0B00110000, 0B00001111 }; // V
uint8_t lW[6] = { 5, 0B00111111, 0B01000000, 0B00111000, 0B01000000, 0B00111111 }; // W
uint8_t lX[6] = { 5, 0B01100011, 0B00010100, 0B00001000, 0B00010100, 0B01100011 }; // X
uint8_t lY[6] = { 5, 0B00000111, 0B00001000, 0B01110000, 0B00001000, 0B00000111 }; // Y
uint8_t lZ[6] = { 4, 0B01100001, 0B01010001, 0B01001001, 0B01000111, 0B00000000 }; // Z

uint8_t letter[156] = { 
4, 0B01111110, 0B00010001, 0B00010001, 0B01111110, 0B00000000,  // A
4, 0B01111111, 0B01001001, 0B01001001, 0B00110110, 0B00000000,  // B
4, 0B00111110, 0B01000001, 0B01000001, 0B00100010, 0B00000000,  // C
4, 0B01111111, 0B01000001, 0B01000001, 0B00111110, 0B00000000,  // D
4, 0B01111111, 0B01001001, 0B01001001, 0B01000001, 0B00000000,  // E
4, 0B01111111, 0B00001001, 0B00001001, 0B00000001, 0B00000000,  // F
4, 0B00111110, 0B01000001, 0B01001001, 0B01111010, 0B00000000,  // G
4, 0B01111111, 0B00001000, 0B00001000, 0B01111111, 0B00000000,  // H
3, 0B01000001, 0B01111111, 0B01000001, 0B00000000, 0B00000000,  // I
4, 0B00110000, 0B01000000, 0B01000001, 0B00111111, 0B00000000,  // J
4, 0B01111111, 0B00001000, 0B00010100, 0B01100011, 0B00000000,  // K
4, 0B01111111, 0B01000000, 0B01000000, 0B01000000, 0B00000000,  // L
5, 0B01111111, 0B00000010, 0B00001100, 0B00000010, 0B01111111,  // M
5, 0B01111111, 0B00000100, 0B00001000, 0B00010000, 0B01111111,  // N
4, 0B00111110, 0B01000001, 0B01000001, 0B00111110, 0B00000000,  // O
4, 0B01111111, 0B00001001, 0B00001001, 0B00000110, 0B00000000,  // P
4, 0B00111110, 0B01000001, 0B01000001, 0B10111110, 0B00000000,  // Q
4, 0B01111111, 0B00001001, 0B00001001, 0B01110110, 0B00000000,  // R
4, 0B01000110, 0B01001001, 0B01001001, 0B00110010, 0B00000000,  // S
5, 0B00000001, 0B00000001, 0B01111111, 0B00000001, 0B00000001,  // T
4, 0B00111111, 0B01000000, 0B01000000, 0B00111111, 0B00000000,  // U
5, 0B00001111, 0B00110000, 0B01000000, 0B00110000, 0B00001111,  // V
5, 0B00111111, 0B01000000, 0B00111000, 0B01000000, 0B00111111,  // W
5, 0B01100011, 0B00010100, 0B00001000, 0B00010100, 0B01100011,  // X
5, 0B00000111, 0B00001000, 0B01110000, 0B00001000, 0B00000111,  // Y
4, 0B01100001, 0B01010001, 0B01001001, 0B01000111, 0B00000000   // Z
};

uint8_t test[5] = { H, E, L, L, O };

void setup (void){
	static uint8_t _txbuf[8] __attribute__ ((section (".sram2")));
	static uint8_t _rxbuf[8] __attribute__ ((section (".sram2")));
	txbuf = _txbuf;
	rxbuf = _rxbuf;	
	

	
	// Run test
  	// All LED segments should light up
  	spiCom(0x0F, 0x01);	
	chThdSleepMilliseconds(100);
	spiCom(0x0F, 0x00);
	
	spiCom(0x0C, 0x00);
	// Disable mode B
	spiCom(0x09, 0x00);
	
	// Use lowest intensity
	spiCom(0x0A, 0x00);
	
	// Scan Limit 8 digits
	spiCom(0x0B, 0x07);
	
	// Turn on chip
	spiCom(0x0C, 0x01);

}

void loop (void){
	
	clearDot();
	for(uint8_t d = 0; d < 5; d++){

		int start = (6 * test[d]);

		for (uint8_t i =0; i < (6 ); i++){
			spiCom(i, letter[start + i]);
			
			 //chThdSleepMilliseconds(500);
			
		}
		
		chThdSleepMilliseconds(1000);
		
	}
}

void clearDot(){
	for (uint8_t d = 0; d < 9; d++){
		spiCom(d, 0x00);

	}
}

void spiCom(uint8_t address, uint8_t value) {
	for (uint8_t d = 0; d < 9; d++){
		txbuf[0] = d;
		txbuf[1] = 0x00;
	}
	spiSelect(&SPID1);		// START SPI
	spiSend(&SPID1,2,txbuf);
	spiUnselect(&SPID1);
	
	txbuf[0] = address;
	txbuf[1] = value;

  	spiSelect(&SPID1);		// START SPI
	spiSend(&SPID1,2,txbuf);
	spiUnselect(&SPID1);

	
}]]></sText>
         </text>
      </attribs>
   </obj>
   <nets/>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>829</x>
      <y>23</y>
      <width>893</width>
      <height>615</height>
   </windowPos>
</patch-1.0>